#!/usr/bin/env node
/* eslint-disable node/shebang */
'use strict'

const yargs = require('yargs')
const wsd = require('../lib/wsd')
const FileStream = require('../lib/fileStream')
const fs = require('fs')
const util = require('util')
const writeFile = util.promisify(fs.writeFile)

const { argv } = yargs
  .usage('$0 [files...]', 'Generate a diagram with websequencediagrams.com')
  .env('WSD')
  .options({
    format: {
      alias: 'f',
      desc: 'Format for output',
      choices: ['png', 'pdf', 'svg'],
      default: 'png',
    },
    output: {
      alias: 'o',
      desc: 'Output file (defaults to [filename].[format])',
      type: 'string',
    },
    style: {
      alias: 's',
      desc: 'Output style',
      choices: wsd.styles,
      default: 'default',
    },
    root: {
      alias: 'r',
      desc: 'WebSequenceDiagrams root URL',
      type: 'string',
      default: 'https://websequencediagrams.com',
    },
    key: {
      alias: 'k',
      desc: 'WebSequenceDiagrams API key',
      type: 'string',
    },
    verbose: {
      desc: 'Verbose output',
      type: 'boolean',
    },
  })
  .epilog(`Any of the options may be specified with an environment variable,\
prefixing the uppercase option name with "WSD_".  For example:

    WSD_KEY=1234 $0 example.wsd
`)
  .alias('h', 'help')
  .help()

if (argv.verbose) {
  console.error('Parsed arguments:', argv)
}

const files = (argv.files && argv.files.length) ? argv.files : ['-']
FileStream.createAll(files)
  .then(async streams => {
    for (const s of streams) {
      const inp = await s.read()
      const [buf, typ] = await wsd.diagram(inp, argv.s, argv.f, argv.k, argv.r)

      let output = argv.o
      if (!output) {
        const ftyp = {
          'image/png': '.png',
          'application/pdf': '.pdf',
          'image/svg+xml': '.xml',
        }[typ]
        if (!ftyp) {
          throw new Error(`Unknown file MIME type: "${typ}"`)
        }
        if (s.name === '-') {
          process.stdout.write(buf)
          continue
        } else {
          output = s.name.replace(/\.wsd$/, ftyp)
        }
      }
      await writeFile(output, buf)
    }
  })
  .catch(er => {
    console.error(er)
    process.exit(1)
  })
